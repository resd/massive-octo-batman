package com.deltapackage;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import com.newpackage.table.CustomCellRenderer;
import common.BruteforceAlgo;
import common.C;
import common.Work1Main;
import simpleMethod.ClassicAlgo;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Евгений
 */
@SuppressWarnings("all")
public class ParentFrame extends JFrame {

    public void setMessage(String msg) {
        messagesTextPane.setText(messagesTextPane.getText() + msg);
    }

    /**
     * Creates new form DeltaFrame
     */
    public ParentFrame() {
        initComponents();
        setNormalGrid(valueTable);
        setTablesSize(10);
        fillValues();

        CustomCellRenderer renderer = new CustomCellRenderer();
        DefaultCellEditor singleclick = new DefaultCellEditor(new JTextField());
        singleclick.setClickCountToStart(1);
        //set the editor as default on every column
        for (int i = 0; i < valueTable.getColumnCount(); i++) {
            Class<?> columnClass = valueTable.getColumnClass(i);
            valueTable.setDefaultEditor(columnClass, singleclick);
            valueTable.setDefaultRenderer(columnClass, renderer);
        }

    }

    private void setNormalGrid(JTable table) {
        table.setShowGrid(true);
        table.setGridColor(Color.black);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elementsGroup = new javax.swing.ButtonGroup();
        jScrollPane4 = new javax.swing.JScrollPane();
        matrixColumn1 = new javax.swing.JTable();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagesTextPane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        valueTable = new javax.swing.JTable();
        optionsPanel = new javax.swing.JPanel();
        btnSolve = new javax.swing.JButton();
        chkbxRandomValues = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        checkBoxConstants = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        MatrixSizeSpinner = new javax.swing.JSpinner();
        FillBtn = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        depthSpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        methodsComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        matrixColumn1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        matrixColumn1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Rows"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        matrixColumn1.setFillsViewportHeight(true);
        matrixColumn1.setRowHeight(20);
        matrixColumn1.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(matrixColumn1);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setDoubleBuffered(true);

        messagesTextPane.setEditable(false);
        jScrollPane1.setViewportView(messagesTextPane);

        jSplitPane1.setBottomComponent(jScrollPane1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        valueTable.setBackground(new java.awt.Color(238, 238, 238));
        valueTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        valueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        valueTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        valueTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        valueTable.setDoubleBuffered(true);
        valueTable.setFillsViewportHeight(true);
        valueTable.setMaximumSize(new java.awt.Dimension(10000, 100000));
        valueTable.setRowHeight(20);
        valueTable.setRowSelectionAllowed(false);
        valueTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        valueTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        valueTable.setTableHeader(null);
        valueTable.setUpdateSelectionOnSort(false);
        valueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueTableMouseClicked(evt);
            }
        });
        valueTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                valueTableMouseMoved(evt);
            }
        });
        jScrollPane2.setViewportView(valueTable);
        valueTable.getAccessibleContext().setAccessibleName("");
        valueTable.getAccessibleContext().setAccessibleDescription("");

        btnSolve.setText("Вычислить");
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        chkbxRandomValues.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        chkbxRandomValues.setText("Заполнять случайными значениями");
        chkbxRandomValues.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                chkbxRandomValuesMousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Размерность матрицы");

        checkBoxConstants.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        checkBoxConstants.setText("Заполнять константами");
        checkBoxConstants.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxConstantsMouseClicked(evt);
            }
        });

        jSpinner1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jSpinner1.setEnabled(false);

        MatrixSizeSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MatrixSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        MatrixSizeSpinner.setToolTipText("");

        FillBtn.setText("Заполнить");
        FillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillBtnActionPerformed(evt);
            }
        });

        elementsGroup.add(jRadioButton1);
        jRadioButton1.setText("DD");

        elementsGroup.add(jRadioButton2);
        jRadioButton2.setText("D1");

        elementsGroup.add(jRadioButton3);
        jRadioButton3.setText("M0");

        elementsGroup.add(jRadioButton5);
        jRadioButton5.setText("D2");

        elementsGroup.add(jRadioButton6);
        jRadioButton6.setText("M1");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        elementsGroup.add(jRadioButton7);
        jRadioButton7.setText("M2");

        jButton1.setText("Очистить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Показать");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        methodsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Все", "Полный перебор",
                "МВиГ классический(без возвратов)", "МВиГ улучшенный(без разрывов)", "МВиГ улучшенный(с разрывами)"}));

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkbxRandomValues)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(checkBoxConstants)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MatrixSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FillBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(methodsComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSolve, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .addComponent(jRadioButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .addComponent(jRadioButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton7))
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton3))
                            .addComponent(depthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(41, 41, 41))
        );

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton5, jRadioButton6, jRadioButton7});

        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(MatrixSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(chkbxRandomValues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxConstants)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FillBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(methodsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSolve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jRadioButton7)
                    .addComponent(jRadioButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton5, jRadioButton6, jRadioButton7});

        saveBtn.setText("Сохранить");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        loadBtn.setText("Загрузить");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        jButton5.setText("Настройки");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Выход");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(saveBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(loadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillBtnActionPerformed

        //устанавливаем размер матрицы
        JSpinner size = (JSpinner) MatrixSizeSpinner;
        int matrixSize = Integer.valueOf(size.getValue().toString());
        setTablesSize(matrixSize);

        //заполняем её
        fillValues();

    }

    private void fillValues() throws NumberFormatException {

        double[][] M1;

        if (chkbxRandomValues.isSelected()) {

            M1 = FillTableRandomValues(true);

        } else if (checkBoxConstants.isSelected()) {

            M1 = FillTableRandomValues(false);

        } else {

            // Входной массив
            double[][] M0
                    = {
                        {
                            0, 0, 83, 9, 30, 6, 50
                        },
                        {
                            0, 0, 66, 37, 17, 12, 26
                        },
                        {
                            29, 1, 0, 19, 0, 12, 5
                        },
                        {
                            32, 83, 66, 0, 49, 0, 80
                        },
                        {
                            3, 21, 56, 7, 0, 0, 28
                        },
                        {
                            0, 85, 8, 42, 89, 0, 0
                        },
                        {
                            18, 0, 0, 0, 58, 13, 0
                        }
                    };

            M1 = M0;

        }

        setTableValue(M1);

    }//GEN-LAST:event_FillBtnActionPerformed

    private void setTableValue(double[][] M0) throws NumberFormatException {

        setTablesSize(M0.length);
        MatrixSizeSpinner.setValue(M0.length);

        double sum = 0;
        double sumRow[] = new double[M0.length];
        DefaultTableModel model = (DefaultTableModel) valueTable.getModel();

        setTableSize(M0.length, M0.length, valueTable);

        for (int i = 0; i < M0.length; i++) {
            for (int j = 0; j < M0[0].length; j++) {
                if (i == j) {
                    model.setValueAt("-", i, j);
                } else //главная таблица
                {
                    model.setValueAt(M0[i][j], i, j);
                }
                //для матрицы столбца
                sum = sum + M0[i][j];
                sumRow[j] = sumRow[j] + M0[i][j];
            }

            sum = 0;
        }
        model.fireTableDataChanged();
    }

    private void setTablesSize(int matrixSize) throws NumberFormatException {

        setTableSize(matrixSize, matrixSize, valueTable);

    }

    private void setTableSize(int width, int height, JTable table) throws NumberFormatException {

        table.setSize(width, height);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnCount(width);
        model.setRowCount(height);
        setWhiteColorForDiagonal(width, height, model);
        model.fireTableStructureChanged();
        resizeColumns();

    }

    private void setWhiteColorForDiagonal(int width, int height, DefaultTableModel model) {
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                if (i == j) {
                    valueTable.setValueAt("-", i, j);
                }
            }
        }
    }


    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed

        String method = methodsComboBox.getSelectedItem().toString();

        messagesTextPane.setText("");
        //JOptionPane.showMessageDialog(rootPane, method);

        double[][] a = getValuesFromTable();
        StringBuilder blder = new StringBuilder();
        blder.append("\n\n");
        BruteforceAlgo bf = new BruteforceAlgo();
        ClassicAlgo sm = new ClassicAlgo(a);

        switch (method) {
            case "Все":
                bf.setM0(a);
                bf.main(a);
                blder.append("Полный перебор");
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(bf.getPath());
                blder.append("\nSum = ");
                blder.append(bf.getSum(a));
                blder.append(",  Time: ");
                blder.append(bf.getTime());
                //parseAndHighlightPath(bf.getPath());
                //w.mainNewMethod();

                sm.main();
                blder.append("\n\nМВиГ классический(без возвратов)");
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(sm.getPath());
                blder.append("\nSum = ");
                blder.append(sm.getSum(a));
                blder.append(",  Time: ");
                blder.append(sm.getTime());

                w.setM0(a);
                w.main();
                blder.append("\n\nМВиГ улучшенный(без разрывов)");
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(w.getPath());
                blder.append("\nSum = ");
                blder.append(w.getSum(a));
                blder.append(",  Time: ");
                blder.append(w.getTime());
                //parseAndHighlightPath(w.getPath());
                //w.mainNewMethod();

                w2.setM0(a);
                w2.main();
                blder.append("\n\nМВиГ улучшенный(с разрывов)");
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(w2.getPath());
                blder.append("\nSum = ");
                blder.append(w2.getSum(a));
                blder.append(",  Time: ");
                blder.append(w2.getTime());

                setMessage(blder.toString());
                break;
            case "Полный перебор":
                bf.setM0(a);
                bf.main(a);
                blder.append(method);
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(bf.getPath());
                blder.append("\nSum = ");
                blder.append(bf.getSum(a));
                blder.append(",  Time: ");
                blder.append(bf.getTime());
                //parseAndHighlightPath(bf.getPath());
                //w.mainNewMethod();
                setMessage(blder.toString());
                break;
            case "МВиГ классический(без возвратов)":
                sm.main();
                blder.append(method);
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(sm.getPath());
                blder.append("\nSum = ");
                blder.append(sm.getSum(a));
                blder.append(",  Time: ");
                blder.append(sm.getTime());
                setMessage(blder.toString());
                break;
            case "МВиГ улучшенный(без разрывов)":
                w.setM0(a);
                w.main();
                blder.append(method);
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(w.getPath());
                blder.append("\nSum = ");
                blder.append(w.getSum(a));
                blder.append(",  Time: ");
                blder.append(w.getTime());
                //parseAndHighlightPath(w.getPath());
                //w.mainNewMethod();
                setMessage(blder.toString());
                break;
            case "МВиГ улучшенный(с разрывами)":
                w2.setM0(a);
                w2.main();
                blder.append(method);
                blder.append(":");
                blder.append("\nPath: ");
                blder.append(w2.getPath());
                blder.append("\nSum = ");
                blder.append(w2.getSum(a));
                blder.append(",  Time: ");
                blder.append(w2.getTime());
                //parseAndHighlightPath(w.getPath());
                //w.mainNewMethod();
                setMessage(blder.toString());
                break;
        }

        // Example of using getters that get 3d matrix contents M1 matrix
        //w.getM1();
        // or with parameter that point to which matrix you want to get.
        //w.getM1(5);

    }//GEN-LAST:event_btnSolveActionPerformed

    private void valueTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueTableMouseMoved
        Point p = evt.getPoint();
        int i = valueTable.rowAtPoint(p) + 1;
        int j = valueTable.columnAtPoint(p) + 1;
        valueTable.setToolTipText(i + " : " + j);
    }//GEN-LAST:event_valueTableMouseMoved

    private void chkbxRandomValuesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkbxRandomValuesMousePressed
        checkBoxConstants.setSelected(false);
    }//GEN-LAST:event_chkbxRandomValuesMousePressed

    private void checkBoxConstantsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxConstantsMouseClicked
        chkbxRandomValues.setSelected(false);
        jSpinner1.setEnabled(true);
    }//GEN-LAST:event_checkBoxConstantsMouseClicked

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void valueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueTableMouseClicked
        if (evt.getClickCount() == 1) {

        }
    }//GEN-LAST:event_valueTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        prepareMessage();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        messagesTextPane.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveBtnActionPerformed
    {//GEN-HEADEREND:event_saveBtnActionPerformed
        saveInformationFromFormToTextFile();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadBtnActionPerformed
    {//GEN-HEADEREND:event_loadBtnActionPerformed
        loadDataFromFile();
    }//GEN-LAST:event_loadBtnActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        optionsPanel.setVisible(!optionsPanel.isVisible());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void resizeColumns() {

        int columnCount = valueTable.getColumnCount();

        for (int i = 0; i < columnCount; i++) {

            valueTable.getColumn(valueTable.getColumnName(i)).setPreferredWidth(80);

        }

    }

    private double[][] getValuesFromTable() {

        int tableSize = (int) MatrixSizeSpinner.getValue();
        double[][] matrix = new double[tableSize][tableSize];

        for (int i = 0; i < tableSize; i++) {
            for (int j = 0; j < tableSize; j++) {
                try {
                    Object o = valueTable.getValueAt(i, j);
                    if (o instanceof Double) {
                        matrix[i][j] = (double) valueTable.getValueAt(i, j);
                    } else if (valueTable.getValueAt(i, j).equals("-")) {
                        matrix[i][j] = 0;
                    } else {
                        String str = o.toString();
                        if (str.contains("*")){
                            str = str.substring(0, str.length() - 1);
                        }
                        matrix[i][j] = Double.parseDouble((String) str);
                    }
                } catch (NullPointerException e) {
                    System.out.println(e);
                }

            }
        }

        printMatrix(matrix);

        return matrix;
    }

    private double[][] FillTableRandomValues(boolean random) {

        int tableSize = (int) MatrixSizeSpinner.getValue();

        double[][] matrix = new double[tableSize][tableSize];

        if (!random) {

            String value = jSpinner1.getValue().toString();
            for (double[] ds : matrix) {

                Arrays.fill(ds, Double.valueOf(value));

            }

        } else {

            for (int i = 0; i < tableSize; i++) {
                for (int j = 0; j < tableSize; j++) {

                    Random r = new Random();
                    matrix[i][j] = r.nextInt(99);

                }
            }

        } // end of else

        return matrix;

    }

    private void printMatrix(double[][] matrix) {

        int size = matrix.length;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                //System.out.print(matrix[i][j]);//todo
            }
        }
    }

    private void saveInformationFromFormToTextFile() {

        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter fil = new FileNameExtensionFilter("Текстовые файлы (.txt)", "txt");
        fc.setFileFilter(fil);

        int res = fc.showSaveDialog(this);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setDialogType(JFileChooser.FILES_AND_DIRECTORIES);
        File path = fc.getSelectedFile();

        Charset charset = Charset.forName("UTF-8");
        StringBuilder builder = new StringBuilder();
        int MatrixSize = Integer.valueOf(MatrixSizeSpinner.getValue().toString());

        java.util.Date date = new java.util.Date(System.currentTimeMillis());

        builder.append(System.lineSeparator());
        builder.append(delimeter);
        builder.append(System.lineSeparator());
        builder.append(date.toString());
        builder.append(System.lineSeparator());
        builder.append(delimeter);

        for (int i = 0; i < MatrixSize; i++) {

            String s = "";

            for (int j = 0; j < MatrixSize; j++) {
                s = s + " " + valueTable.getValueAt(i, j);
            }

            builder.append(System.lineSeparator());
            builder.append(s);

        }

        builder.append(System.lineSeparator());
        builder.append(delimeter);
        builder.append(System.lineSeparator());

        builder.append(messagesTextPane.getText());

        try (FileWriter fw = new FileWriter(fc.getSelectedFile() + ".txt")) {

            if (JFileChooser.APPROVE_OPTION == res) {

                fw.write(builder.toString());
                JOptionPane.showMessageDialog(this, "OK!");
            }

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, "Ошибка! Нет такого файла!");

        }

    }

    private void loadDataFromFile() {

        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter fil = new FileNameExtensionFilter("Текстовые файлы (.txt)", "txt");
        fc.setFileFilter(fil);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setDialogType(JFileChooser.OPEN_DIALOG);

        int res = fc.showOpenDialog(this);
        List newLines = new List();

        if (res == JFileChooser.APPROVE_OPTION) {

            try {

                java.util.List<String> fileContent = Files.readAllLines(fc.getSelectedFile().toPath(), Charset.forName("UTF-8"));

                int delimeterCounter = 0;

                for (String fileContent1 : fileContent) {

                    System.out.println(fileContent1);

                    if (fileContent1.equals(delimeter)) {
                        delimeterCounter++;
                        continue;
                    }

                    if (delimeterCounter == 2) {
                        newLines.add(fileContent1);
                    }

                    if (delimeterCounter > 2) {
                        break;
                    }
                }

                parseStringFromFile(newLines);

            } catch (Exception ex) {
                System.out.println(fc.getSelectedFile());
                JOptionPane.showMessageDialog(this, "ERROR!!!");
                System.out.println(ex);
            }

        }

    }

    private void parseStringFromFile(List fileContent1) {

        String[] lines = fileContent1.getItems();

        int i = 0;
        int j = 0;
        double[][] newValues = new double[lines.length][lines.length];

        for (String line : lines) {

            String values[] = line.split(" ");
            for (String value : values) {

                if (value.equals(" ") || value.equals("")) {
                    continue;
                }

                double newValue = 0;

                if (value.equals("-")) {
                    newValue = 0;
                } else {
                    newValue = Double.parseDouble(value);
                }

                newValues[i][j] = newValue;
                j++;
            }
            j = 0;
            i++;
        }

        //передать newValues в таблицу.......
        setTableValue(newValues);

    }

    private void prepareMessage() {

        /*StringBuilder builder = new StringBuilder();//todo Запилить в интерфейсе эти методы
        int count = (int) depthSpinner.getValue();
        builder.append("\n");
        try {
            builder = appendMatrixToBuilder(builder, w.getM0ch(count), "M0");
            builder = appendMatrixToBuilder(builder, w.getM1(count), "M1");
            builder = appendMatrixToBuilder(builder, w.getM2(count), "M2");
            builder = appendMatrixToBuilder(builder, w.getD1(count), "D1");
            builder = appendMatrixToBuilder(builder, w.getD2(count), "D2");
            builder = appendMatrixToBuilder(builder, w.getDD(count), "DD");
        } catch (Exception e) {
            setMessage("Сначала необходимо нажать кнопку вычислить!");
        }

        setMessage(builder.toString());*/
    }

    private StringBuilder appendMatrixToBuilder(StringBuilder builder, double[][] d1, String name) {

        builder.append(System.lineSeparator());
        builder.append(delimeter);
        builder.append(name);
        builder.append(delimeter);
        builder.append(System.lineSeparator());

        for (int i = 0; i < d1.length; i++) {
            double[] d11 = d1[i];
            for (int i1 = 0; i1 < d11.length; i1++) {
                double e = d11[i1];
                if (i == i1) {
                    builder.append("-");
                } else {
                    builder.append(C.round(e));
                }
                builder.append("\t");
            }
            builder.append("\n");
        }

        return builder;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FillBtn;
    private javax.swing.JSpinner MatrixSizeSpinner;
    private javax.swing.JButton btnSolve;
    private javax.swing.JCheckBox checkBoxConstants;
    private javax.swing.JCheckBox chkbxRandomValues;
    private javax.swing.JSpinner depthSpinner;
    private javax.swing.ButtonGroup elementsGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JTable matrixColumn1;
    private javax.swing.JTextPane messagesTextPane;
    private javax.swing.JComboBox methodsComboBox;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTable valueTable;
    // End of variables declaration//GEN-END:variables
    String delimeter = "---------------------";
    Work1Main w = new Work1Main(1);
    Work1Main w2 = new Work1Main(2);

    private void parseAndHighlightPath(String path) {
        //Path example
        //(6-7) (7-3) (4-6) (3-5) (1-4) (5-2) (2-1)
        Pattern p = Pattern.compile("\\d+");
        Matcher m = p.matcher(path);

        while (m.find()) {

            int row = Integer.valueOf(m.group());

            m.find();
            int column = Integer.valueOf(m.group());
            Object value = valueTable.getValueAt(row - 1, column - 1);
            String str = value.toString();
            if (str.contains("*"))
                break;
            else
                valueTable.setValueAt(value + "*", row - 1, column - 1);

        }

    }

    private void parseCell(String arrayList1) {

        for (int i = 0; i < arrayList1.length(); i++) {

        }

    }

}
